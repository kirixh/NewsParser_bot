import telebot
import threading
from db_config import db, update_db, Theme, Story
import time
import schedule
from string import punctuation
import nltk
from nltk.corpus import stopwords

bot = telebot.TeleBot('1725519373:AAEwmtfr4Qr5stY9mV61iqaBtA80j8abLsk')


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}.'
                          f' –≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ https://www.rbc.ru/story/\n'
                          f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.')


def nltk_convers(text):
    spec_symb = punctuation + '\n\xa0¬´¬ª\t‚Äî‚Ä¶'
    text = "".join([ch for ch in text.lower() if ch not in spec_symb])
    text_tokens = nltk.word_tokenize(text)
    filtered_tokens = []
    stop_words = stopwords.words("russian")
    for token in text_tokens:
        if token not in stop_words:
            filtered_tokens.append(token)
    text = nltk.Text(filtered_tokens)
    fdist = nltk.FreqDist(text)
    return fdist


def analyse_flags(text):
    words = nltk_convers(text)
    topics = {'üá∫üá¶': ['—É–∫—Ä', '–∫–∏–µ–≤', '–∑–µ–ª–µ–Ω—Å–∫', '–¥–æ–Ω–±–∞', '–¥–æ–Ω–µ—Ü–∫', '–ª—É–≥–∞–Ω—Å–∫'],
              'üá∫üá∏': ['—Å—à–∞', '–∞–º–µ—Ä', '–≤–∞—à–∏–Ω–≥—Ç', '–±–∞–π–¥–µ–Ω'],
              'üá¨üáß': ['–∞–Ω–≥–ª–∏', '–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω', '–ª–æ–Ω–¥–æ–Ω', '–¥–∂–æ–Ω—Å–æ', 'brexit'],
              'üá∑üá∫': ['—Ä—É—Å—Å', '—Ä–æ—Å—Å–∏', '–º–æ—Å–∫–≤', '–ø—É—Ç–∏–Ω', '–Ω–∞–≤–∞–ª—å–Ω'],
              'ü¶†': ['–ø–∞–Ω–¥–µ–º–∏', '–∫–æ—Ä–æ–Ω–∞–≤', '–≤–∏—Ä—É—Å', 'covid', '–∫–∞—Ä–∞–Ω—Ç–∏–Ω', '–≤–∞–∫—Ü–∏–Ω']}
    output = []
    for word in words:
        for topic_ in topics:
            if topic_ in output:
                continue
            for root in topics[topic_]:
                if root in word:
                    output.append(topic_)
                    break
    return output


def new_docs(message):
    if message.text.isdigit():
        number = int(message.text)
        for news in Story.select().order_by(Story.last_upd.desc()).limit(number):
            theme = "".join(analyse_flags(news.text))
            bot.send_message(message.chat.id,
                             f"{theme}{news.name.upper()}{theme}\n\n {news.text}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {news.url}")
    else:
        bot.send_message(message.chat.id, '–¶–∏—Ñ—Ä—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')


def new_topics(message):
    if message.text.isdigit():
        number = int(message.text)
        for theme in Theme.select().order_by(Theme.pub_date.desc()).limit(number):
            flags = "".join(analyse_flags(theme.name))
            bot.send_message(message.chat.id,
                             f"{flags}{theme.name.upper()}{flags}\n\n {theme.pub_date}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {theme.url}")
    else:
        bot.send_message(message.chat.id, '–¶–∏—Ñ—Ä—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')


def topic(message):
    text = message.text
    if text.isdigit():
        find = Theme.select().where(Theme.id == text)
        if find:
            text = find[0].name
        else:
            bot.send_message(message.chat.id, '–¢–µ–º—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–µ—Ç.')
            return
    if Theme.select().where(Theme.name == text):
        flags = "".join(analyse_flags(text))
        bot.send_message(message.chat.id, f"{flags}{text.upper()}{flags}")
        for news in Story.select().where(Story.theme == text).order_by(Story.last_upd.desc()).limit(5):
            flags = "".join(analyse_flags(news.text))
            bot.send_message(message.chat.id,
                             f"{flags}{news.name.upper()}{flags}\n\n {news.last_upd}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {news.url}")
    else:
        bot.send_message(message.chat.id, '–¢–µ–º—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–µ—Ç.')


def dock(message):
    text = message.text
    if text.isdigit():
        find = Story.select().where(Story.id == text)
        if find:
            text = find[0].name
        else:
            bot.send_message(message.chat.id, '–ù–æ–≤–æ—Å—Ç–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–µ—Ç.')
            return
    news = Story.select().where(Story.name == text)
    if news:
        news = news[0]
        flags = "".join(analyse_flags(news.text))
        bot.send_message(message.chat.id,
                         f"{flags}{news.name.upper()}{flags}\n\n {news.text}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {news.url}")
    else:
        bot.send_message(message.chat.id, '–ù–æ–≤–æ—Å—Ç–∏ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–µ—Ç.')


@bot.message_handler(commands=['get_topics'])
def get_topics(message):
    output_str = ''
    for row in Theme.select():
        flags = "".join(analyse_flags(row.name))
        output_str += f"{row.id}. {flags}{row.name}{flags}\n"
    bot.send_message(message.chat.id, output_str)


@bot.message_handler(commands=['new_docs'])
def command(message):
    bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π?")
    bot.register_next_step_handler(message, new_docs)


@bot.message_handler(commands=['new_topics'])
def command(message):
    bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–º?")
    bot.register_next_step_handler(message, new_topics)


@bot.message_handler(commands=['topic'])
def command(message):
    bot.send_message(message.chat.id, "–ö–∞–∫–∞—è —Ç–µ–º–∞?")
    bot.register_next_step_handler(message, topic)


@bot.message_handler(commands=['dock'])
def command(message):
    bot.send_message(message.chat.id, "–ö–∞–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å?")
    bot.register_next_step_handler(message, dock)


def threaded_func(func):
    thread = threading.Thread(target=func)
    thread.start()
    thread.join()


bot_thread = threading.Thread(target=bot.polling)
bot_thread.start()
schedule.every().hour.do(threaded_func, update_db)
if __name__ == '__main__':
    while True:
        schedule.run_pending()
        time.sleep(1)
