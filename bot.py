import telebot
import threading
import time
import schedule
import nltk
from db_config import users_db, User, update_db, update_user_db, Theme, Story
from string import punctuation
from nltk.corpus import stopwords

bot = telebot.TeleBot('TOKEN')


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}.'
                          f' –≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ https://www.rbc.ru/story/\n'
                          f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.')
    update_user_db(message.from_user.id)  # –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


@bot.message_handler(commands=['help'])
def send_help(message):
    bot.reply_to(message, '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n'
                          '1. /help - –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n'
                          '2. /new_docs - –ø–æ–∫–∞–∑–∞—Ç—å <N> —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.\n'
                          '3. /new_topics - –ø–æ–∫–∞–∑–∞—Ç—å <N> —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö —Ç–µ–º.\n'
                          '4. /get_topics - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–º –≤ –±–∞–∑–µ.\n'
                          '5. /get_docs <–ù–æ–º–µ—Ä/–ù–∞–∑–≤–∞–Ω–∏–µ> - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ.\n'
                          '6. /topic <–ù–æ–º–µ—Ä/–ù–∞–∑–≤–∞–Ω–∏–µ> - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ 5 —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —ç—Ç–æ–π —Ç–µ–º–µ.\n'
                          '7. /doc <–ù–æ–º–µ—Ä/–ù–∞–∑–≤–∞–Ω–∏–µ> - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.\n'
                          '8. /describe_doc <–ù–æ–º–µ—Ä/–ù–∞–∑–≤–∞–Ω–∏–µ> - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–æ–≤–æ—Å—Ç–∏.\n'
                          '9. /subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ—á–∞—Å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π.\n'
                          '10 /unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –µ–∂–µ—á–∞—Å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.\n')


@bot.message_handler(commands=['subscribe'])
def bot_subscribe(message):
    flag = subscribe(message.from_user.id)
    if flag:
        bot.reply_to(message, "–í—ã —É–∂–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    else:
        bot.reply_to(message, "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")


@bot.message_handler(commands=['unsubscribe'])
def bot_unsubscribe(message):
    flag = unsubscribe(message.from_user.id)
    if flag:
        bot.reply_to(message, "–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    else:
        bot.reply_to(message, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")


@bot.message_handler(commands=['get_topics'])
def get_topics(message):
    output_str = ''
    for row in Theme.select():
        flags = "".join(analyse_flags(row.name))
        output_str += f"{row.id}. {flags}{row.name}{flags}\n"
    bot.send_message(message.chat.id, output_str)


@bot.message_handler(commands=['get_docs'])
def bot_get_docs(message):
    bot.send_message(message.chat.id, "–ö–∞–∫–∞—è —Ç–µ–º–∞?")
    bot.register_next_step_handler(message, get_docs)


@bot.message_handler(commands=['new_docs'])
def bot_new_docs(message):
    bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π?")
    bot.register_next_step_handler(message, new_docs)


@bot.message_handler(commands=['new_topics'])
def bot_new_topics(message):
    bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–º?")
    bot.register_next_step_handler(message, new_topics)


@bot.message_handler(commands=['topic'])
def bot_topic(message):
    bot.send_message(message.chat.id, "–ö–∞–∫–∞—è —Ç–µ–º–∞?")
    bot.register_next_step_handler(message, topic)


@bot.message_handler(commands=['doc'])
def bot_doc(message):
    bot.send_message(message.chat.id, "–ö–∞–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å?")
    bot.register_next_step_handler(message, doc)


@bot.message_handler(commands=['describe_doc'])
def bot_describe_doc(message):
    bot.send_message(message.chat.id, "–ö–∞–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å?")
    bot.register_next_step_handler(message, describe_doc)


"""*************************************************************"""


def nltk_convers(text):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç, –≤—ã–±—Ä–∞—Å—ã–≤–∞—è –∏–∑ –Ω–µ–≥–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    :param text: —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    :return: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (—Å–ª–æ–≤–æ - —á–∞—Å—Ç–æ—Ç–∞)
    """
    spec_symb = punctuation + '\n\xa0¬´¬ª\t‚Äî‚Ä¶'
    text = "".join([ch for ch in text.lower() if ch not in spec_symb])
    text_tokens = nltk.word_tokenize(text)
    filtered_tokens = []
    stop_words = stopwords.words("russian")
    for token in text_tokens:
        if token not in stop_words:
            filtered_tokens.append(token)
    text = nltk.Text(filtered_tokens)
    fdist = nltk.FreqDist(text)
    return fdist


def analyse_flags(text):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, –ø–æ–Ω–∏–º–∞—è –µ–≥–æ —Ç–µ–º–∞—Ç–∏–∫—É –ø–æ –∫–æ—Ä–Ω—è–º —Å–ª–æ–≤.
    :param text: —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    :return: —Ñ–ª–∞–≥–∏ –ø–æ —Ç–µ–º–µ —Ç–µ–∫—Å—Ç–∞, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    """
    words = nltk_convers(text)
    topics = {'üá∫üá¶': ['—É–∫—Ä', '–∫–∏–µ–≤', '–∑–µ–ª–µ–Ω—Å–∫', '–¥–æ–Ω–±–∞', '–¥–æ–Ω–µ—Ü–∫', '–ª—É–≥–∞–Ω—Å–∫'],
              'üá∫üá∏': ['—Å—à–∞', '–∞–º–µ—Ä', '–≤–∞—à–∏–Ω–≥—Ç', '–±–∞–π–¥–µ–Ω'],
              'üá¨üáß': ['–∞–Ω–≥–ª–∏', '–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω', '–ª–æ–Ω–¥–æ–Ω', '–¥–∂–æ–Ω—Å–æ', 'brexit'],
              'üá∑üá∫': ['—Ä—É—Å—Å', '—Ä–æ—Å—Å–∏', '–º–æ—Å–∫–≤', '–ø—É—Ç–∏–Ω', '–Ω–∞–≤–∞–ª—å–Ω'],
              'ü¶†': ['–ø–∞–Ω–¥–µ–º–∏', '–∫–æ—Ä–æ–Ω–∞–≤', '–≤–∏—Ä—É—Å', 'covid', '–∫–∞—Ä–∞–Ω—Ç–∏–Ω', '–≤–∞–∫—Ü–∏–Ω']}
    output = []
    for word in words:
        for topic_ in topics:
            if topic_ in output:
                continue
            for root in topics[topic_]:
                if root in word:
                    output.append(topic_)
                    break
    return output


def new_docs(message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç message —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö —Å—Ç–∞—Ç–µ–π.
    :param message: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π.
    """
    if message.text.isdigit():
        number = int(message.text)
        for news in Story.select().order_by(Story.last_upd.desc()).limit(number):
            theme = "".join(analyse_flags(news.text))  # –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤
            bot.send_message(message.chat.id,
                             f"{theme}{news.name.upper()}{theme}\n\n {news.text}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {news.url}")
    else:
        bot.send_message(message.chat.id, '–¶–∏—Ñ—Ä—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')


def new_topics(message):
    """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç message —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö —Ç–µ–º.
        :param message: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º.
        """
    if message.text.isdigit():
        number = int(message.text)
        for theme in Theme.select().order_by(Theme.pub_date.desc()).limit(number):
            flags = "".join(analyse_flags(theme.name))  # –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤
            bot.send_message(message.chat.id,
                             f"{flags}{theme.name.upper()}{flags}\n\n {theme.pub_date}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {theme.url}")
    else:
        bot.send_message(message.chat.id, '–¶–∏—Ñ—Ä—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')


def topic(message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ 5 —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —ç—Ç–æ–π —Ç–µ–º–µ.
    :param message: –ù–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
    """
    text = message.text
    if text.isdigit():  # –µ—Å–ª–∏ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä
        find = Theme.select().where(Theme.id == text)
        if find:
            text = find[0].name
        else:
            bot.send_message(message.chat.id, '–¢–µ–º—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–µ—Ç.')
            return
    if Theme.select().where(Theme.name == text):
        flags = "".join(analyse_flags(text))  # –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
        bot.send_message(message.chat.id, f"{flags}{text.upper()}{flags}")
        for news in Story.select().where(Story.theme == text).order_by(Story.last_upd.desc()).limit(5):
            flags = "".join(analyse_flags(news.text))  # –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
            bot.send_message(message.chat.id,
                             f"{flags}{news.name.upper()}{flags}\n\n {news.last_upd}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {news.url}")
    else:
        bot.send_message(message.chat.id, '–¢–µ–º—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–µ—Ç.')


def doc(message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.
    :param message: –ù–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    text = message.text
    if text.isdigit():  # –µ—Å–ª–∏ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä
        find = Story.select().where(Story.id == text)
        if find:
            text = find[0].name
        else:
            bot.send_message(message.chat.id, '–ù–æ–≤–æ—Å—Ç–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–µ—Ç.')
            return
    news = Story.select().where(Story.name == text)
    if news:
        news = news[0]
        flags = "".join(analyse_flags(news.text))  # –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–æ–≤
        bot.send_message(message.chat.id,
                         f"{flags}{news.name.upper()}{flags}\n\n {news.text}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {news.url}")
    else:
        bot.send_message(message.chat.id, '–ù–æ–≤–æ—Å—Ç–∏ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–µ—Ç.')


def describe_doc(message):
    """
    –í—ã–≤–æ–∏—Ç —á–∞—Å—Ç–æ—Ç—É —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–ª–æ–≤ –∏ —Å—Ä–µ–¥–Ω—é—é –¥–ª–∏–Ω—É —Å–ª–æ–≤–∞ –≤ —Å—Ç–∞—Ç—å–µ.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    text = message.text
    if text.isdigit():  # –µ—Å–ª–∏ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏
        find = Story.select().where(Story.id == text)
        if find:
            text = find[0].name
        else:
            bot.send_message(message.chat.id, '–ù–æ–≤–æ—Å—Ç–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–µ—Ç.')
            return
    news = Story.select().where(Story.name == text)
    if news:
        news = news[0]
        fdist = nltk_convers(news.text)  # –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–∞—Å—Ç–æ—Ç
        output_str = ''
        mean_len = 0
        for word in fdist.most_common(len(fdist)):
            output_str += f"{word[0]} - {word[1]}\n"
            mean_len += len(word[0])
        mean_len = mean_len // len(fdist)
        bot.send_message(message.chat.id, f"–ß–∞—Å—Ç–æ—Ç–∞ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π —Å–ª–æ–≤:\n{output_str}"
                                          f"\n–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤ - {mean_len}")
    else:
        bot.send_message(message.chat.id, '–ù–æ–≤–æ—Å—Ç–∏ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–µ—Ç.')


def get_docs(message):
    """
    –í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–µ–π –≤ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    text = message.text
    if text.isdigit():  # –µ—Å–ª–∏ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–º—ã
        find = Theme.select().where(Theme.id == text)
        if find:
            text = find[0].name
        else:
            bot.send_message(message.chat.id, '–¢–µ–º—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–µ—Ç.')
            return
    if Theme.select().where(Theme.name == text):
        for news in Story.select().where(Story.theme == text).order_by(Story.id):
            flags = "".join(analyse_flags(news.text))  # –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–æ–≤
            bot.send_message(message.chat.id,
                             f"{news.id}. {flags}{news.name}{flags}\n")
    else:
        bot.send_message(message.chat.id, '–¢–µ–º—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–µ—Ç.')


def unsubscribe(user_id):
    """
    –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –µ–∂–µ—á–∞—Å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.
    :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    users_db.connect()
    user = User.select().where(User.user_id == user_id)
    flag = False  # —Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –∑–∞–∫–æ–Ω–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user:
        User.create(user_id=user_id, subscribed=False)  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ –≤ –ë–î, –¥–æ–±–∞–≤–∏—Ç—å
    else:
        if not user[0].subscribed:  # –µ—Å–ª–∏ –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω, —Ç–æ —ç—Ç–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ
            flag = True
        else:
            user[0].subscribed = False  # –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            user[0].save()
    users_db.close()
    return flag


def subscribe(user_id):
    """
    –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ—á–∞—Å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É.
    :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    users_db.connect()
    user = User.select().where(User.user_id == user_id)
    flag = False  # —Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –∑–∞–∫–æ–Ω–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user:
        User.create(user_id=user_id, subscribed=True)  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ –≤ –ë–î, –¥–æ–±–∞–≤–∏—Ç—å
    else:
        if user[0].subscribed:  # –µ—Å–ª–∏ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω, —Ç–æ —ç—Ç–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ
            flag = True
        else:
            user[0].subscribed = True  # –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            user[0].save()
    users_db.close()
    return flag


def mailing(last_upd):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    :param last_upd: –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–≤–æ—Å—Ç–∏,
     –≤ —Ñ–æ—Ä–º–µ —Å–ø–∏—Å–∫–∞ –∏–∑ 1 —ç–ª–µ–º–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏.
    """
    news = Story.select().where(Story.last_upd > last_upd[0]).order_by(Story.last_upd.desc())
    for user in User.select().where(User.subscribed):  # –ø—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        for new_story in news:  # –ø—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –≤—Å–µ–º –Ω–æ–≤–µ–π—à–∏–º —Å—Ç–∞—Ç—å—è–º
            theme = "".join(analyse_flags(new_story.text))  # –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–æ–≤
            bot.send_message(user.user_id,
                             f"{theme}{new_story.name.upper()}{theme}\n\n {new_story.text}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {new_story.url}")
    if news:
        last_upd[0] = news[0].last_upd


def threaded_func(func, *args):
    """
    –ó–∞–≥–æ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤ –ø–æ—Ç–æ–∫.
    :param func: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    :param args: –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
    """
    thread = threading.Thread(target=func, args=args)
    thread.start()  # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    thread.join()  # –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫


mail_last_upd = [Story.select().order_by(Story.last_upd.desc()).limit(1)[0].last_upd]  # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–≤–æ—Å—Ç–∏
bot_thread = threading.Thread(target=bot.polling)  # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
bot_thread.start()
schedule.every().hour.do(threaded_func, update_db)  # –∫–∞–∂–¥—ã–π —á–∞—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ë–î —Å–∞–π—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
# —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
schedule.every(65).minutes.do(threaded_func, mailing, mail_last_upd)
# –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î —Å–∞–π—Ç–∞.
if __name__ == '__main__':
    while True:
        schedule.run_pending()
        time.sleep(1)
