import datetime
import nltk
import unittest
from bot_functions import analyse_flags, nltk_convers
from web_request import Parser


class CommandTest(unittest.TestCase):

    def setUp(self):  # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤
        self.parser1 = Parser('https://www.rbc.ru/story/6009a4899a79471a2909f35a')
        self.parser2 = Parser('https://www.rbc.ru/rbcfreenews/609a20029a7947068a8b7cf8')
        nltk.download('punkt')
        nltk.download('stopwords')

    def test_analyse_flags(self):  # –ï—Å–ª–∏ –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–º—ë–Ω –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø—É—Ç–∏.
        self.assertEqual(analyse_flags("–ó–µ–ª–µ–Ω—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –ü—É—Ç–∏–Ω—ã–º."
                                       " –ù–∞ –≤—Å—Ç—Ä–µ—á–µ –æ–±—Å—É–¥—è—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –≤ —Å—Ñ–µ—Ä–µ –±–æ—Ä—å–±—ã"
                                       " —Å –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–æ–º –∏ –≤–∑–∞–∏–º–Ω–æ–π –ø–æ–º–æ—â–∏."), ['üá∫üá¶', 'üá∑üá∫', 'ü¶†'])

    def test_nltk_convers(self):  # –ï—Å–ª–∏ –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –¥–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —á–∞—Å—Ç–æ—Ç.
        self.assertEqual(nltk_convers("–ú–∞—à–∞ –ø—Ä–∏—à–ª–∞ –∫—É—à–∞—Ç—å –∫–∞—à—É. –ö–∞—à–∞ –Ω–µ –±—ã–ª–∞ –≤–∫—É—Å–Ω–æ–π,"
                                      " —Ç–∞–∫ —á—Ç–æ –æ–Ω–∞ —Å—Ç–∞–ª–∞ –∫—É—à–∞—Ç—å –±–æ—Ä—â.").most_common(3),
                         [('–∫—É—à–∞—Ç—å', 2), ('–º–∞—à–∞', 1), ('–ø—Ä–∏—à–ª–∞', 1)])

    def test_find_stories(self):  # –ï—Å–ª–∏ —Å—Ç–∞—Ç—å—è —Å –¥–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–º–µ–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—É –∏ —Å—Å—ã–ª–∫—É.
        self.assertEqual(self.parser1.find_stories()['–í –ú–æ—Å–∫–≤–µ —Ä–∞–Ω—å—à–µ —Å—Ä–æ–∫–∞ –æ—Ç–∫—Ä–æ—é—Ç'
                                                     ' –∑–∞–∫—Ä—ã—Ç—ã–π —É—á–∞—Å—Ç–æ–∫ —Å–∞–ª–∞—Ç–æ–≤–æ–π –≤–µ—Ç–∫–∏ –º–µ—Ç—Ä–æ'],
                         (datetime.datetime(2021, 5, 13, 12, 31),
                          'https://www.rbc.ru/rbcfreenews/609ceeeb9a79476c5fdb4a3f'))

    def test_parse_story(self):  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –¥–∞–Ω–Ω—ã–º–∏.
        self.assertEqual(self.parser2.parse_story()[0], '–ñ–ö–•\n–ú–æ—Å–∫–≤–∞\n–≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞\n–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ\n')


if __name__ == "__main__":
    unittest.main()
